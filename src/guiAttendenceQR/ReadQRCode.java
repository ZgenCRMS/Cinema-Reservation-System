/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package guiAttendenceQR;

import com.formdev.flatlaf.themes.FlatMacDarkLaf;
import com.formdev.flatlaf.themes.FlatMacLightLaf;
import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamPanel;
import com.github.sarxos.webcam.WebcamResolution;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;
import guiManager.AdminDashboard;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadFactory;
import java.util.logging.Level;
import java.util.logging.Logger;
import model.mySQL;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.mySQL;

/**
 *
 * @author wajir
 */
public class ReadQRCode extends javax.swing.JFrame implements Runnable, ThreadFactory {

    private Webcam webcam = null;
    private WebcamPanel panel = null;
    private Executor executor = Executors.newSingleThreadExecutor(this);

    public ReadQRCode() {
        initComponents();
        initWebcam();
        viewEmployee();
        jTextField1.setEnabled(false);

    }

    private void reload() {

        java.lang.Runnable runnable = new java.lang.Runnable() {
            @Override
            public void run() {

                while (true) {

                    viewEmployee();

                    try {
                        Thread.sleep(3000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(AdminDashboard.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }

            }
        };

        java.lang.Thread thread = new java.lang.Thread(runnable);
        thread.start();

    }

    private void viewEmployee() {

        try {
            ResultSet resultSet = mySQL.executeSearch("SELECT * FROM `employye_attendce`INNER JOIN emp_qr ON employye_attendce.emp_qr_qr_number=emp_qr.qr_number INNER JOIN employee ON emp_qr.employee_mobile=employee.mobile INNER JOIN attendce_type ON employye_attendce.attendce_type_id=attendce_type.id");

            DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
            dtm.setRowCount(0);

            while (resultSet.next()) {
                Vector<String> vector = new Vector<>();
                vector.add(resultSet.getString("employee.fname"));
                vector.add(resultSet.getString("emp_qr_qr_number"));
                vector.add(resultSet.getString("attendce_type.name"));
                vector.add(resultSet.getString("date"));

                dtm.addRow(vector);

            }

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 51, 102));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTextField1.setFont(new java.awt.Font("Segoe UI", 1, 25)); // NOI18N
        jTextField1.setForeground(new java.awt.Color(255, 255, 255));
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField1KeyPressed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(24, 119, 242));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Submit");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "QR Number", "Type", "Date Time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(50);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(70);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(40);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 446, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 508, Short.MAX_VALUE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 467, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

//        String Qrcode = jTextField1.getText().trim();
//
//// Remove leading/trailing quotes if any
//        if (Qrcode.startsWith("'")) {
//            Qrcode = Qrcode.substring(1);
//        }
//        if (Qrcode.endsWith("'")) {
//            Qrcode = Qrcode.substring(0, Qrcode.length() - 1);
//        }
//
//        Date now = new Date();
//        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
//        SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm:ss");
//
//        String currentDate = dateFormat.format(now);
//        String currentTime = timeFormat.format(now);
//
//        try {
//            ResultSet resultSet1 = mySQL.executeSearch("SELECT * FROM `emp_qr` WHERE `qr_number`='" + Qrcode + "'");
//
//            if (resultSet1.next()) {
//                // Check if attendance already marked for today
//                ResultSet resultSet2 = mySQL.executeSearch(
//                        "SELECT * FROM `employye_attendce` WHERE `emp_qr_qr_number`='" + Qrcode + "' AND `date` LIKE '" + currentDate.substring(0, 10) + "%'"
//                );
//
//                if (resultSet2.next()) {
//                    JOptionPane.showMessageDialog(this,
//                            "⚠️ Attendance Already Marked for Today!",
//                            "Duplicate Entry", JOptionPane.WARNING_MESSAGE);
//                } else {
//                    // Determine attendance type
//                    int attendanceTypeId = (currentTime.compareTo("08:00:00") <= 0) ? 1 : 2;
//
//                    // Insert attendance with type
//                    mySQL.executeIUD("INSERT INTO `employye_attendce` (`emp_qr_qr_number`, `date`, `attendce_type_id`) "
//                            + "VALUES ('" + Qrcode + "', '" + currentDate + "', '" + attendanceTypeId + "')");
//
//                    // Insert salary with type
//                    mySQL.executeIUD("");
//
//                    viewEmployee();
//                    reload();
//                    jTextField1.setText("");
//
//                    if (attendanceTypeId == 1) {
//                        JOptionPane.showMessageDialog(this,
//                                "✅ Attendance Marked Successfully!\n🕒 Time: " + currentTime,
//                                "Success", JOptionPane.INFORMATION_MESSAGE);
//                    } else {
//                        JOptionPane.showMessageDialog(this,
//                                "✅ Late Attendance Recorded!\n🕒 Time: " + currentTime + "\n⚠️ Marked as Late",
//                                "Late Attendance", JOptionPane.WARNING_MESSAGE);
//                    }
//                }
//            } else {
//                JOptionPane.showMessageDialog(this, "❌ Invalid QR Code!", "Warning", JOptionPane.WARNING_MESSAGE);
//                viewEmployee();
//                reload();
//            }
//
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
        String Qrcode = jTextField1.getText().trim();

        // Remove leading/trailing quotes
        if (Qrcode.startsWith("'")) {
            Qrcode = Qrcode.substring(1);
        }
        if (Qrcode.endsWith("'")) {
            Qrcode = Qrcode.substring(0, Qrcode.length() - 1);
        }

        Date now = new Date();
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        SimpleDateFormat onlyDateFormat = new SimpleDateFormat("yyyy-MM-dd");
        SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm:ss");

        String currentDateTime = dateFormat.format(now);
        String currentDate = onlyDateFormat.format(now);
        String currentTime = timeFormat.format(now);

        try {
            ResultSet resultSet1 = mySQL.executeSearch("SELECT * FROM `emp_qr` WHERE `qr_number`='" + Qrcode + "'");

            if (resultSet1.next()) {
                // Check for existing attendance
                ResultSet resultSet2 = mySQL.executeSearch(
                        "SELECT * FROM `employye_attendce` WHERE `emp_qr_qr_number`='" + Qrcode + "' AND `date` LIKE '" + currentDate + "%'"
                );

                if (resultSet2.next()) {
                    JOptionPane.showMessageDialog(this,
                            "⚠️ Attendance Already Marked for Today!",
                            "Duplicate Entry", JOptionPane.WARNING_MESSAGE);
                } else {
                    // Determine attendance type
                    int attendanceTypeId = (currentTime.compareTo("08:00:00") <= 0) ? 1 : 2;

                    // Insert attendance
                    mySQL.executeIUD("INSERT INTO `employye_attendce` (`emp_qr_qr_number`, `date`, `attendce_type_id`) "
                            + "VALUES ('" + Qrcode + "', '" + currentDateTime + "', '" + attendanceTypeId + "')");

                    // Get the last inserted attendce ID
                    ResultSet rsAttend = mySQL.executeSearch("SELECT LAST_INSERT_ID() AS last_id");
                    int attendanceId = 0;
                    if (rsAttend.next()) {
                        attendanceId = rsAttend.getInt("last_id");
                    }

                    // Fetch daySalary
                    ResultSet rsSalary = mySQL.executeSearch(
                            "SELECT emp_type.daySalary "
                            + "FROM emp_qr "
                            + "INNER JOIN employee ON emp_qr.employee_mobile = employee.mobile "
                            + "INNER JOIN emp_type ON employee.emp_type_id = emp_type.id "
                            + "WHERE emp_qr.qr_number = '" + Qrcode + "'"
                    );

                    double finalSalary = 0;
                    if (rsSalary.next()) {
                        double daySalary = rsSalary.getDouble("daySalary");
                        finalSalary = (attendanceTypeId == 1) ? daySalary : daySalary / 2.0;
                    }

                    // Insert salary record
                    mySQL.executeIUD("INSERT INTO `employee_salary` (`salary`, `date`, `employye_attendce_id`) "
                            + "VALUES ('" + finalSalary + "', '" + currentDate + "', '" + attendanceId + "')");
                    System.out.println(attendanceId);
                    viewEmployee();
                    reload();
                    jTextField1.setText("");

                    if (attendanceTypeId == 1) {
                        JOptionPane.showMessageDialog(this,
                                "✅ Attendance Marked Successfully!\n🕒 Time: " + currentTime,
                                "Success", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(this,
                                "✅ Late Attendance Recorded!\n🕒 Time: " + currentTime + "\n⚠️ Marked as Late",
                                "Late Attendance", JOptionPane.WARNING_MESSAGE);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "❌ Invalid QR Code!", "Warning", JOptionPane.WARNING_MESSAGE);
                viewEmployee();
                reload();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }


    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyPressed
//        String QRcode = jTextField1.getText();
        //Resultset resultset = 
//if (evt.getKeyCode () == KeyEvent.VK_ENTER) {
//JOptionPane.showMessageDialog(this, "Your QRcode number is :" + QRcode);
//java.util.Date date = new java.util.Date();
//java.sql.Date sqldate = new java.sql.Date (date.getTime());
//java.sql.Timestamp sqltime = new java.sql.Timestamp (date.getTime());
////pst = con.prepareStatement("SELECT * FROM employye_attendce WHERE barcodenumber = ?");
//pst = con.
//pst.setString(1,QRcode);
//}
    }//GEN-LAST:event_jTextField1KeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        FlatMacDarkLaf.setup();

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReadQRCode().setVisible(true);
            }
        });
    }

    private void initWebcam() {
        Dimension size = WebcamResolution.QVGA.getSize();
        webcam = Webcam.getWebcams().get(0);
        webcam.setViewSize(size);

        panel = new WebcamPanel(webcam);
        panel.setPreferredSize(size);
        panel.setFPSDisplayed(true);

        jPanel2.add(panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 500, 360));
        executor.execute(this);
    }

    @Override

    public void run() {
        do {
            try {
                Thread.sleep(100);
            } catch (InterruptedException ex) {
                Logger.getLogger(ReadQRCode.class.getName()).log(Level.SEVERE, null, ex);
            }
            Result result = null;
            BufferedImage image = null;

            if (webcam.isOpen()) {
                if ((image = webcam.getImage()) == null) {
                    continue;
                }
            }

            LuminanceSource source = new BufferedImageLuminanceSource(image);
            BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));

            try {
                result = new MultiFormatReader().decode(bitmap);
            } catch (NotFoundException ex) {
                Logger.getLogger(ReadQRCode.class.getName()).log(Level.SEVERE, null, ex);
            }

            if (result != null) {
                jTextField1.setText(result.getText());
            }

        } while (true);
    }
//@Override

    public Thread newThread(Runnable r) {
        Thread t = new Thread(r, "My Thread");
        t.setDaemon(true);
        return t;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
